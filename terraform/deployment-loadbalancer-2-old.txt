provider "kubernetes" {}

resource "kubernetes_namespace" "default" {
  metadata {
    name = "default"
  }
}

module "demo-app" {
  source = "terraform-kubernetes-modules/deployment/kubernetes"

  name      = "demo-app"
  namespace = "default"

  deployment_spec = {
    replicas = 3
    selector = {
      match_labels = {
        app = "demo"
      }
    }
    strategy = {
      type = "RollingUpdate"
      rolling_update = {
        max_surge = "25%"
        max_unavailable = "25%"
      }
    }
    template = {
      metadata = {
        labels = {
          app = "demo"
        }
      }
      spec = {
        containers = [
          {
            name  = "demo-spa-container"
            image = "kumaranisk/spa-demo:v1"
            resources = {
              limits = {
                cpu    = "1"
                memory = "200Mi"
              }
              requests = {
                cpu    = "500m"
                memory = "100Mi"
              }
            }
            liveness_probe = {
              tcp_socket = {
                port = 8000
              }
              initial_delay_seconds = 5
              timeout_seconds = 5
              success_threshold = 1
              failure_threshold = 3
              period_seconds = 10
            }
            readiness_probe = {
              http_get = {
                path = "/"
                port = 8000
              }
              initial_delay_seconds = 5
              timeout_seconds = 2
              success_threshold = 1
              failure_threshold = 3
              period_seconds = 10
            }
            image_pull_policy = "Always"
            ports = [
              {
                container_port = 8000
                name = "demo-spa-port"
              }
            ]
          }
        ]
        termination_grace_period_seconds = 1
        restart_policy = "Always"
      }
    }
  }

  service_spec = {
    type = "LoadBalancer"
    selector = {
      app = "demo"
    }
    ports = [
      {
        name = "demo-loadbalancer-port"
        port = 8002
        target_port = 8000
        protocol = "TCP"
      }
    ]
  }
}
